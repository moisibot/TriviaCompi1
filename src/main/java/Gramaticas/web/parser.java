
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Gramaticas.web;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\011\000\002\004\007\000\002\005\003" +
    "\000\002\005\005\000\002\006\005\000\002\006\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\020" +
    "\003\000\002\020\005\000\002\010\006\000\002\013\003" +
    "\000\002\013\005\000\002\011\002\000\002\011\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\004\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\006\004\006\015\010\001\002\000\004\002" +
    "\065\001\002\000\004\002\uffff\001\002\000\004\005\041" +
    "\001\002\000\004\002\000\001\002\000\004\016\011\001" +
    "\002\000\004\054\013\001\002\000\010\002\uffe0\013\014" +
    "\017\016\001\002\000\010\002\uffe2\013\uffe2\017\uffe2\001" +
    "\002\000\004\054\040\001\002\000\004\002\uffe3\001\002" +
    "\000\004\020\017\001\002\000\010\007\020\023\021\054" +
    "\023\001\002\000\010\007\020\023\021\054\023\001\002" +
    "\000\010\007\020\023\021\054\023\001\002\000\010\002" +
    "\uffdf\021\031\022\032\001\002\000\004\057\024\001\002" +
    "\000\010\054\030\055\025\056\027\001\002\000\016\002" +
    "\ufff8\010\ufff8\012\ufff8\013\ufff8\021\ufff8\022\ufff8\001\002" +
    "\000\012\002\uffde\010\uffde\021\uffde\022\uffde\001\002\000" +
    "\016\002\ufff7\010\ufff7\012\ufff7\013\ufff7\021\ufff7\022\ufff7" +
    "\001\002\000\016\002\ufff6\010\ufff6\012\ufff6\013\ufff6\021" +
    "\ufff6\022\ufff6\001\002\000\010\007\020\023\021\054\023" +
    "\001\002\000\010\007\020\023\021\054\023\001\002\000" +
    "\012\002\uffdc\010\uffdc\021\031\022\uffdc\001\002\000\012" +
    "\002\uffdd\010\uffdd\021\uffdd\022\uffdd\001\002\000\012\002" +
    "\uffdb\010\uffdb\021\uffdb\022\uffdb\001\002\000\010\010\037" +
    "\021\031\022\032\001\002\000\012\002\uffda\010\uffda\021" +
    "\uffda\022\uffda\001\002\000\010\002\uffe1\013\uffe1\017\uffe1" +
    "\001\002\000\004\055\042\001\002\000\004\007\043\001" +
    "\002\000\004\054\045\001\002\000\004\010\063\001\002" +
    "\000\004\014\046\001\002\000\004\011\047\001\002\000" +
    "\006\007\050\054\053\001\002\000\006\007\050\054\053" +
    "\001\002\000\006\012\057\013\056\001\002\000\010\010" +
    "\ufffc\012\ufffc\013\ufffc\001\002\000\004\014\054\001\002" +
    "\000\010\054\030\055\025\056\027\001\002\000\010\010" +
    "\ufff9\012\ufff9\013\ufff9\001\002\000\006\007\050\054\053" +
    "\001\002\000\004\010\ufffd\001\002\000\010\010\ufffb\012" +
    "\ufffb\013\ufffb\001\002\000\006\010\062\013\056\001\002" +
    "\000\010\010\ufffa\012\ufffa\013\ufffa\001\002\000\004\006" +
    "\064\001\002\000\004\002\ufffe\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\010\002\003\003\006\010\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\011\001\001\000" +
    "\004\011\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\021\001" +
    "\001\000\004\012\035\001\001\000\004\012\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\033\001\001\000\004\012" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\050\006\051\001\001\000\006\005\060" +
    "\006\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\054\001\001\000\002\001\001" +
    "\000\004\006\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
        System.out.println("Error sintáctico en la línea " + (s.left + 1) + " columna " + s.right + ". Token inesperado: " + s.value);
    }
 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error sintáctico irrecuperable en la línea " + (s.left + 1) + " columna " + s.right + ". Token inesperado: " + s.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= solicitud_xson 
            {
              Object RESULT =null;
		int sxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,Object> sx = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               RESULT = sx;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= consulta_sqlkv 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,Object> cs = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               RESULT = cs;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // solicitud_xson ::= XSON_VERSION REALIZAR_SOLICITUD STRING LLAVE_ABRE bloque_parametros LLAVE_CIERRA FIN_SOLICITUD 
            {
              Map<String,Object> RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Map<String,Object>> bp = (List<Map<String,Object>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                     Map<String, Object> result = new HashMap<>();
                     result.put("version", "XSON_VERSION");
                     result.put("tipo_solicitud", tipo);
                     result.put("parametros", bp);
                     RESULT = result;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("solicitud_xson",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque_parametros ::= IDENTIFIER DOS_PUNTOS CORCHETE_ABRE lista_parametros CORCHETE_CIERRA 
            {
              List<Map<String,Object>> RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Map<String,Object>> lp = (List<Map<String,Object>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = lp;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_parametros",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_parametros ::= parametro 
            {
              List<Map<String,Object>> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,Object> p = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       List<Map<String, Object>> list = new ArrayList<>();
                       list.add(p);
                       RESULT = list;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_parametros ::= lista_parametros COMA parametro 
            {
              List<Map<String,Object>> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Map<String,Object>> lp = (List<Map<String,Object>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,Object> p = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       lp.add(p);
                       RESULT = lp;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametro ::= LLAVE_ABRE lista_parametros LLAVE_CIERRA 
            {
              Map<String,Object> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Map<String,Object>> lp = (List<Map<String,Object>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Map<String, Object> map = new HashMap<>();
                map.put("subparametros", lp);
                RESULT = map;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametro ::= IDENTIFIER DOS_PUNTOS valor 
            {
              Map<String,Object> RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Map<String, Object> map = new HashMap<>();
                map.put(nombre, v);
                RESULT = map;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valor ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = s;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // valor ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = n;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // valor ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = id;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // solicitud_usuario ::= USUARIO_NUEVO solicitud_xson 
            {
              Map<String,Object> RESULT =null;
		int sxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,Object> sx = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Map<String, Object> result = new HashMap<>();
                        result.put("tipo", "USUARIO_NUEVO");
                        result.put("datos", sx);
                        RESULT = result;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("solicitud_usuario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // solicitud_usuario ::= MODIFICAR_USUARIO solicitud_xson 
            {
              Map<String,Object> RESULT =null;
		int sxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,Object> sx = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Map<String, Object> result = new HashMap<>();
                        result.put("tipo", "MODIFICAR_USUARIO");
                        result.put("datos", sx);
                        RESULT = result;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("solicitud_usuario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // solicitud_usuario ::= ELIMINAR_USUARIO solicitud_xson 
            {
              Map<String,Object> RESULT =null;
		int sxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,Object> sx = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Map<String, Object> result = new HashMap<>();
                        result.put("tipo", "ELIMINAR_USUARIO");
                        result.put("datos", sx);
                        RESULT = result;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("solicitud_usuario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // solicitud_usuario ::= LOGIN_USUARIO solicitud_xson 
            {
              Map<String,Object> RESULT =null;
		int sxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,Object> sx = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Map<String, Object> result = new HashMap<>();
                        result.put("tipo", "LOGIN_USUARIO");
                        result.put("datos", sx);
                        RESULT = result;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("solicitud_usuario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // solicitud_trivia ::= NUEVA_TRIVIA solicitud_xson 
            {
              Map<String,Object> RESULT =null;
		int sxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,Object> sx = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       Map<String, Object> result = new HashMap<>();
                       result.put("tipo", "NUEVA_TRIVIA");
                       result.put("datos", sx);
                       RESULT = result;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("solicitud_trivia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // solicitud_trivia ::= ELIMINAR_TRIVIA solicitud_xson 
            {
              Map<String,Object> RESULT =null;
		int sxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,Object> sx = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       Map<String, Object> result = new HashMap<>();
                       result.put("tipo", "ELIMINAR_TRIVIA");
                       result.put("datos", sx);
                       RESULT = result;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("solicitud_trivia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // solicitud_trivia ::= MODIFICAR_TRIVIA solicitud_xson 
            {
              Map<String,Object> RESULT =null;
		int sxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,Object> sx = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       Map<String, Object> result = new HashMap<>();
                       result.put("tipo", "MODIFICAR_TRIVIA");
                       result.put("datos", sx);
                       RESULT = result;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("solicitud_trivia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // solicitud_componente ::= AGREGAR_COMPONENTE solicitud_xson 
            {
              Map<String,Object> RESULT =null;
		int sxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,Object> sx = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           Map<String, Object> result = new HashMap<>();
                           result.put("tipo", "AGREGAR_COMPONENTE");
                           result.put("datos", sx);
                           RESULT = result;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("solicitud_componente",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // solicitud_componente ::= ELIMINAR_COMPONENTE solicitud_xson 
            {
              Map<String,Object> RESULT =null;
		int sxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,Object> sx = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           Map<String, Object> result = new HashMap<>();
                           result.put("tipo", "ELIMINAR_COMPONENTE");
                           result.put("datos", sx);
                           RESULT = result;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("solicitud_componente",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // solicitud_componente ::= MODIFICAR_COMPONENTE solicitud_xson 
            {
              Map<String,Object> RESULT =null;
		int sxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Map<String,Object> sx = (Map<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           Map<String, Object> result = new HashMap<>();
                           result.put("tipo", "MODIFICAR_COMPONENTE");
                           result.put("datos", sx);
                           RESULT = result;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("solicitud_componente",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // clase_componente ::= CAMPO_TEXTO 
            {
              String RESULT =null;
		
                       RESULT = "CAMPO_TEXTO";
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase_componente",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // clase_componente ::= AREA_TEXTO 
            {
              String RESULT =null;
		
                       RESULT = "AREA_TEXTO";
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase_componente",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // clase_componente ::= CHECKBOX 
            {
              String RESULT =null;
		
                       RESULT = "CHECKBOX";
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase_componente",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // clase_componente ::= RADIO 
            {
              String RESULT =null;
		
                       RESULT = "RADIO";
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase_componente",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // clase_componente ::= FICHERO 
            {
              String RESULT =null;
		
                       RESULT = "FICHERO";
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase_componente",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // clase_componente ::= COMBO 
            {
              String RESULT =null;
		
                       RESULT = "COMBO";
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase_componente",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opciones_componente ::= STRING 
            {
              List<String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          List<String> opciones = new ArrayList<>();
                          opciones.add(s);
                          RESULT = opciones;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_componente",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // opciones_componente ::= opciones_componente COMA STRING 
            {
              List<String> RESULT =null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> oc = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          oc.add(s);
                          RESULT = oc;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_componente",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // consulta_sqlkv ::= SELECCIONAR REPORTE lista_id_trivias filtro 
            {
              Map<String,Object> RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> lid = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     Map<String, Object> result = new HashMap<>();
                     result.put("tipo", "CONSULTA_SQLKV");
                     result.put("id_trivias", lid);
                     result.put("filtro", f);
                     RESULT = result;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("consulta_sqlkv",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_id_trivias ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       List<String> ids = new ArrayList<>();
                       ids.add(id);
                       RESULT = ids;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_id_trivias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_id_trivias ::= lista_id_trivias COMA IDENTIFIER 
            {
              List<String> RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> lid = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       lid.add(id);
                       RESULT = lid;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_id_trivias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // filtro ::= 
            {
              Object RESULT =null;
		
             RESULT = null;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filtro",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // filtro ::= FILTRAR POR condicion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = c;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filtro",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion ::= IDENTIFIER OPERADOR valor 
            {
              Object RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String campo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Map<String, Object> cond = new HashMap<>();
                cond.put("campo", campo);
                cond.put("operador", op);
                cond.put("valor", v);
                RESULT = cond;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= condicion AND condicion 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Map<String, Object> cond = new HashMap<>();
                cond.put("tipo", "AND");
                cond.put("izquierda", c1);
                cond.put("derecha", c2);
                RESULT = cond;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= condicion OR condicion 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Map<String, Object> cond = new HashMap<>();
                cond.put("tipo", "OR");
                cond.put("izquierda", c1);
                cond.put("derecha", c2);
                RESULT = cond;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion ::= NOT condicion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Map<String, Object> cond = new HashMap<>();
                cond.put("tipo", "NOT");
                cond.put("condicion", c);
                RESULT = cond;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicion ::= LLAVE_ABRE condicion LLAVE_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
