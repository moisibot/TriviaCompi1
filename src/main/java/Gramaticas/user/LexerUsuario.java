/* The following code was generated by JFlex 1.7.0 */

package Gramaticas.user;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.jflex</tt>
 */
public class LexerUsuario implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\2\1\0\1\3\1\1\16\5\4\0\1\3\1\0"+
    "\1\10\1\0\1\4\7\0\1\36\1\0\1\7\1\0\12\6\1\35"+
    "\6\0\1\13\1\4\1\22\1\25\1\12\1\26\1\32\1\4\1\15"+
    "\2\4\1\14\1\31\1\27\1\21\2\4\1\11\1\20\1\23\1\24"+
    "\1\30\3\4\1\16\4\0\1\17\1\0\1\13\1\4\1\22\1\25"+
    "\1\12\1\26\1\32\1\4\1\15\2\4\1\14\1\31\1\27\1\21"+
    "\2\4\1\11\1\20\1\23\1\24\1\30\3\4\1\16\1\33\1\0"+
    "\1\34\1\0\41\5\2\0\4\4\4\0\1\4\2\0\1\5\7\0"+
    "\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0\70\4\2\15"+
    "\115\4\1\20\u0142\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0"+
    "\1\4\21\0\160\5\5\4\1\0\2\4\2\0\4\4\1\0\1\4"+
    "\6\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4\1\0\123\4"+
    "\1\0\213\4\1\0\5\5\2\0\246\4\1\0\46\4\2\0\1\4"+
    "\6\0\51\4\6\0\1\4\1\0\55\5\1\0\1\5\1\0\2\5"+
    "\1\0\2\5\1\0\1\5\10\0\33\4\4\0\4\4\15\0\6\5"+
    "\5\0\1\4\4\0\13\5\1\0\1\5\3\0\53\4\37\5\4\0"+
    "\2\4\1\5\143\4\1\0\1\4\10\5\1\0\6\5\2\4\2\5"+
    "\1\0\4\5\2\4\12\5\3\4\2\0\1\4\17\0\1\5\1\4"+
    "\1\5\36\4\33\5\2\0\131\4\13\5\1\4\16\0\12\5\41\4"+
    "\11\5\2\4\4\0\1\4\2\0\1\5\30\4\4\5\1\4\11\5"+
    "\1\4\3\5\1\4\5\5\22\0\31\4\3\5\4\0\13\4\5\0"+
    "\30\4\1\0\6\4\1\0\2\5\6\0\10\5\52\4\72\5\66\4"+
    "\3\5\1\4\22\5\1\4\7\5\12\4\2\5\2\0\12\5\1\0"+
    "\20\4\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4"+
    "\1\0\1\4\3\0\4\4\2\0\1\5\1\4\7\5\2\0\2\5"+
    "\2\0\3\5\1\4\10\0\1\5\4\0\2\4\1\0\3\4\2\5"+
    "\2\0\12\5\4\4\7\0\2\4\1\0\1\5\2\0\3\5\1\0"+
    "\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\2\4\1\0\2\4\2\0\1\5\1\0\5\5\4\0\2\5\2\0"+
    "\3\5\3\0\1\5\7\0\4\4\1\0\1\4\7\0\14\5\3\4"+
    "\1\5\13\0\3\5\1\0\11\4\1\0\3\4\1\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4\10\5\1\0"+
    "\3\5\1\0\3\5\2\0\1\4\17\0\2\4\2\5\2\0\12\5"+
    "\1\0\1\4\7\0\1\4\6\5\1\0\3\5\1\0\10\4\2\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0"+
    "\1\5\1\4\7\5\2\0\2\5\2\0\3\5\7\0\3\5\4\0"+
    "\2\4\1\0\3\4\2\5\2\0\12\5\1\0\1\4\20\0\1\5"+
    "\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0"+
    "\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\14\4\4\0"+
    "\5\5\3\0\3\5\1\0\4\5\2\0\1\4\6\0\1\5\16\0"+
    "\12\5\11\0\1\4\6\0\5\5\10\4\1\0\3\4\1\0\27\4"+
    "\1\0\20\4\2\0\1\5\1\4\7\5\1\0\3\5\1\0\4\5"+
    "\7\0\2\5\1\0\3\4\2\0\1\4\2\0\2\4\2\5\2\0"+
    "\12\5\20\0\1\4\3\5\1\0\10\4\1\0\3\4\1\0\27\4"+
    "\1\0\12\4\1\0\5\4\2\0\1\5\1\4\7\5\1\0\3\5"+
    "\1\0\4\5\7\0\2\5\6\0\2\4\1\0\2\4\2\5\2\0"+
    "\12\5\1\0\2\4\1\5\14\0\4\5\11\4\1\0\3\4\1\0"+
    "\51\4\2\5\1\4\7\5\1\0\3\5\1\0\4\5\1\4\5\0"+
    "\3\4\1\5\7\0\3\4\2\5\2\0\12\5\12\0\6\4\1\0"+
    "\3\5\1\0\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0"+
    "\7\4\3\0\1\5\4\0\6\5\1\0\1\5\1\0\10\5\6\0"+
    "\12\5\2\0\2\5\15\0\60\4\1\5\2\4\7\5\4\0\10\4"+
    "\10\5\1\0\12\5\47\0\2\4\1\0\1\4\1\0\5\4\1\0"+
    "\30\4\1\0\1\4\1\0\12\4\1\5\2\4\11\5\1\4\2\0"+
    "\5\4\1\0\1\4\1\0\7\5\1\0\12\5\2\0\4\4\40\0"+
    "\1\4\27\0\2\5\6\0\12\5\13\0\1\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\10\4\1\0\44\4\4\0\24\5\1\0\2\5"+
    "\5\4\13\5\1\0\44\5\11\0\1\5\71\0\53\4\24\5\1\4"+
    "\12\5\6\0\6\4\4\5\4\4\3\5\1\4\3\5\2\4\7\5"+
    "\3\4\4\5\15\4\14\5\1\4\17\5\2\0\46\4\1\0\1\4"+
    "\5\0\1\4\2\0\53\4\1\0\u014d\4\1\0\4\4\2\0\7\4"+
    "\1\0\1\4\1\0\4\4\2\0\51\4\1\0\4\4\2\0\41\4"+
    "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\17\4"+
    "\1\0\71\4\1\0\4\4\2\0\103\4\2\0\3\5\40\0\20\4"+
    "\20\0\126\4\2\0\6\4\3\0\u026c\4\2\0\21\4\1\0\32\4"+
    "\5\0\113\4\3\0\13\4\7\0\22\4\4\5\11\0\23\4\3\5"+
    "\13\0\22\4\2\5\14\0\15\4\1\0\3\4\1\0\2\5\14\0"+
    "\64\4\40\5\3\0\1\4\3\0\2\4\1\5\2\0\12\5\41\0"+
    "\17\5\6\0\131\4\7\0\5\4\2\5\42\4\1\5\1\4\5\0"+
    "\106\4\12\0\37\4\1\0\14\5\4\0\14\5\12\0\12\5\36\4"+
    "\2\0\5\4\13\0\54\4\4\0\32\4\6\0\12\5\46\0\27\4"+
    "\5\5\4\0\65\4\12\5\1\0\35\5\2\0\13\5\6\0\12\5"+
    "\15\0\1\4\10\0\16\5\1\0\20\5\61\0\5\5\57\4\21\5"+
    "\10\4\3\0\12\5\21\0\11\5\14\0\3\5\36\4\15\5\2\4"+
    "\12\5\54\4\16\5\14\0\44\4\24\5\10\0\12\5\3\0\3\4"+
    "\12\5\44\4\2\0\11\4\7\0\53\4\2\0\3\4\20\0\3\5"+
    "\1\0\25\5\4\4\1\5\6\4\1\5\2\4\3\5\1\4\5\0"+
    "\300\4\100\5\u0116\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0"+
    "\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0"+
    "\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0"+
    "\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0\7\4\16\0"+
    "\5\5\32\0\5\5\20\0\2\4\23\0\1\4\13\0\5\5\1\0"+
    "\12\5\1\0\1\4\15\0\1\4\20\0\15\4\3\0\41\4\17\0"+
    "\15\5\4\0\1\5\3\0\14\5\21\0\1\4\4\0\1\4\2\0"+
    "\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0"+
    "\1\4\21\0\51\4\u0a77\0\345\4\6\0\4\4\3\5\2\4\14\0"+
    "\46\4\1\0\1\4\5\0\1\4\2\0\70\4\7\0\1\4\17\0"+
    "\1\5\27\4\11\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\40\5"+
    "\57\0\1\4\u01d5\0\3\4\31\0\11\4\6\5\1\0\5\4\2\0"+
    "\5\4\4\0\126\4\2\0\2\5\2\0\3\4\1\0\132\4\1\0"+
    "\4\4\5\0\53\4\1\0\136\4\21\0\40\4\60\0\20\4\u0200\0"+
    "\u19c0\4\100\0\u568d\4\103\0\56\4\2\0\u010d\4\3\0\20\4\12\5"+
    "\2\4\24\0\57\4\1\5\4\0\12\5\1\0\37\4\2\5\120\4"+
    "\2\5\45\0\11\4\2\0\147\4\2\0\100\4\5\0\2\4\1\0"+
    "\1\4\1\0\5\4\30\0\20\4\1\5\3\4\1\5\4\4\1\5"+
    "\27\4\5\5\4\0\1\5\13\0\1\4\7\0\64\4\14\0\2\5"+
    "\62\4\22\5\12\0\12\5\6\0\22\5\6\4\3\0\1\4\1\0"+
    "\2\4\13\5\34\4\10\5\2\0\27\4\15\5\14\0\35\4\3\0"+
    "\4\5\57\4\16\5\16\0\1\4\12\5\6\0\5\4\1\5\12\4"+
    "\12\5\5\4\1\0\51\4\16\5\11\0\3\4\1\5\10\4\2\5"+
    "\2\0\12\5\6\0\27\4\3\0\1\4\3\5\62\4\1\5\1\4"+
    "\3\5\2\4\2\5\5\4\2\5\1\4\1\5\1\4\30\0\3\4"+
    "\2\0\13\4\5\5\2\0\3\4\2\5\12\0\6\4\2\0\6\4"+
    "\2\0\6\4\11\0\7\4\1\0\7\4\1\0\53\4\1\0\16\4"+
    "\6\0\163\4\10\5\1\0\2\5\2\0\12\5\6\0\u2ba4\4\14\0"+
    "\27\4\4\0\61\4\u2104\0\u016e\4\2\0\152\4\46\0\7\4\14\0"+
    "\5\4\5\0\1\4\1\5\12\4\1\0\15\4\1\0\5\4\1\0"+
    "\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0"+
    "\100\4\2\0\66\4\50\0\15\4\3\0\20\5\20\0\20\5\3\0"+
    "\2\4\30\0\3\4\31\0\1\4\6\0\5\4\1\0\207\4\2\0"+
    "\1\5\4\0\1\4\13\0\12\5\7\0\32\4\4\0\1\4\1\0"+
    "\32\4\13\0\131\4\3\0\6\4\2\0\6\4\2\0\6\4\2\0"+
    "\3\4\3\0\2\4\3\0\2\4\22\0\3\5\4\0\14\4\1\0"+
    "\32\4\1\0\23\4\1\0\2\4\1\0\17\4\2\0\16\4\42\0"+
    "\173\4\105\0\65\4\210\0\1\5\202\0\35\4\3\0\61\4\17\0"+
    "\1\5\37\0\40\4\15\0\36\4\5\0\46\4\5\5\5\0\36\4"+
    "\2\0\44\4\4\0\10\4\1\0\5\4\52\0\236\4\2\0\12\5"+
    "\6\0\44\4\4\0\44\4\4\0\50\4\10\0\64\4\14\0\13\4"+
    "\1\0\17\4\1\0\7\4\1\0\2\4\1\0\13\4\1\0\17\4"+
    "\1\0\7\4\1\0\2\4\103\0\u0137\4\11\0\26\4\12\0\10\4"+
    "\30\0\6\4\1\0\52\4\1\0\11\4\105\0\6\4\2\0\1\4"+
    "\1\0\54\4\1\0\2\4\3\0\1\4\2\0\27\4\12\0\27\4"+
    "\11\0\37\4\101\0\23\4\1\0\2\4\12\0\26\4\12\0\32\4"+
    "\106\0\70\4\6\0\2\4\100\0\1\4\3\5\1\0\2\5\5\0"+
    "\4\5\4\4\1\0\3\4\1\0\35\4\2\0\3\5\4\0\1\5"+
    "\40\0\35\4\3\0\35\4\43\0\10\4\1\0\34\4\2\5\31\0"+
    "\66\4\12\0\26\4\12\0\23\4\15\0\22\4\156\0\111\4\67\0"+
    "\63\4\15\0\63\4\15\0\44\4\4\5\10\0\12\5\u0146\0\52\4"+
    "\1\0\2\5\3\0\2\4\113\0\3\5\35\4\12\0\1\4\10\0"+
    "\26\4\13\5\37\0\22\4\4\5\52\0\25\4\33\0\27\4\11\0"+
    "\3\5\65\4\17\5\37\0\13\5\2\4\2\5\1\4\11\0\4\5"+
    "\55\4\13\5\2\0\1\5\4\0\1\5\12\0\1\5\2\0\31\4"+
    "\7\0\12\5\6\0\3\5\44\4\16\5\1\0\12\5\4\0\1\4"+
    "\2\5\1\4\10\0\43\4\1\5\2\0\1\4\11\0\3\5\60\4"+
    "\16\5\4\4\4\0\4\5\1\0\14\5\1\4\1\0\1\4\43\0"+
    "\22\4\1\0\31\4\14\5\6\0\1\5\2\4\1\5\76\0\7\4"+
    "\1\0\1\4\1\0\4\4\1\0\17\4\1\0\12\4\7\0\57\4"+
    "\14\5\5\0\12\5\6\0\4\5\1\0\10\4\2\0\2\4\2\0"+
    "\26\4\1\0\7\4\1\0\2\4\1\0\5\4\1\0\2\5\1\4"+
    "\7\5\2\0\2\5\2\0\3\5\2\0\1\4\6\0\1\5\5\0"+
    "\5\4\2\5\2\0\7\5\3\0\5\5\213\0\65\4\22\5\4\4"+
    "\5\0\12\5\4\0\1\5\3\4\36\0\60\4\24\5\2\4\1\0"+
    "\1\4\10\0\12\5\246\0\57\4\7\5\2\0\11\5\27\0\4\4"+
    "\2\5\42\0\60\4\21\5\3\0\1\4\13\0\12\5\46\0\53\4"+
    "\15\5\1\4\7\0\12\5\66\0\33\4\2\0\17\5\4\0\12\5"+
    "\6\0\7\4\271\0\54\4\17\5\145\0\100\4\12\5\25\0\10\4"+
    "\2\0\1\4\2\0\10\4\1\0\2\4\1\0\30\4\6\5\1\0"+
    "\2\5\2\0\4\5\1\4\1\5\1\4\2\5\14\0\12\5\106\0"+
    "\10\4\2\0\47\4\7\5\2\0\7\5\1\4\1\0\1\4\1\5"+
    "\33\0\1\4\12\5\50\4\7\5\1\4\4\5\10\0\1\5\10\0"+
    "\1\4\13\5\56\4\20\5\3\0\1\4\22\0\111\4\u0107\0\11\4"+
    "\1\0\45\4\10\5\1\0\10\5\1\4\17\0\12\5\30\0\36\4"+
    "\2\0\26\5\1\0\16\5\111\0\7\4\1\0\2\4\1\0\46\4"+
    "\6\5\3\0\1\5\1\0\2\5\1\0\7\5\1\4\1\5\10\0"+
    "\12\5\6\0\6\4\1\0\2\4\1\0\40\4\5\5\1\0\2\5"+
    "\1\0\5\5\1\4\7\0\12\5\u0136\0\23\4\4\5\11\0\2\5"+
    "\1\4\1\5\15\4\1\0\42\4\7\5\3\0\5\5\15\0\12\5"+
    "\126\0\1\4\54\0\4\4\37\0\u039a\4\146\0\157\4\21\0\304\4"+
    "\u0a4c\0\141\4\17\0\u0430\4\21\5\6\4\17\5\u0faa\0\u0247\4\u21b9\0"+
    "\u0239\4\7\0\37\4\1\0\12\5\6\0\117\4\1\0\12\5\6\0"+
    "\36\4\2\0\5\5\13\0\60\4\7\5\11\0\4\4\14\0\12\5"+
    "\11\0\25\4\5\0\23\4\u02b0\0\100\4\200\0\113\4\4\0\1\5"+
    "\1\4\67\5\7\0\4\5\15\4\100\0\2\4\1\0\1\4\1\5"+
    "\13\0\2\5\16\0\u17f8\4\10\0\u04d6\4\52\0\11\4\u22e7\0\4\4"+
    "\1\0\7\4\1\0\2\4\1\0\u0123\4\17\0\1\4\35\0\3\4"+
    "\2\0\1\4\16\0\4\4\10\0\u018c\4\u0904\0\153\4\5\0\15\4"+
    "\3\0\11\4\7\0\12\4\3\0\2\5\1\0\4\5\u125c\0\56\5"+
    "\2\0\27\5\u021e\0\5\5\3\0\26\5\2\0\7\5\36\0\4\5"+
    "\224\0\3\5\u01bb\0\125\4\1\0\107\4\1\0\2\4\2\0\1\4"+
    "\2\0\2\4\2\0\4\4\1\0\14\4\1\0\1\4\1\0\7\4"+
    "\1\0\101\4\1\0\4\4\2\0\10\4\1\0\7\4\1\0\34\4"+
    "\1\0\4\4\1\0\5\4\1\0\1\4\3\0\7\4\1\0\u0154\4"+
    "\2\0\31\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4"+
    "\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4\1\0\31\4"+
    "\1\0\10\4\2\0\62\5\u0200\0\67\5\4\0\62\5\10\0\1\5"+
    "\16\0\1\5\26\0\5\5\1\0\17\5\u0450\0\37\4\6\0\6\4"+
    "\325\0\7\5\1\0\21\5\2\0\7\5\1\0\2\5\1\0\5\5"+
    "\5\0\76\4\41\0\1\5\160\0\55\4\3\0\7\5\7\4\2\0"+
    "\12\5\4\0\1\4\u0141\0\36\4\1\5\21\0\54\4\16\5\5\0"+
    "\1\4\u01d0\0\34\4\16\5\u02e6\0\7\4\1\0\4\4\1\0\2\4"+
    "\1\0\17\4\1\0\305\4\13\0\7\5\51\0\104\4\7\5\1\4"+
    "\4\0\12\5\u0356\0\1\4\u014f\0\4\4\1\0\33\4\1\0\2\4"+
    "\1\0\1\4\2\0\1\4\1\0\12\4\1\0\4\4\1\0\1\4"+
    "\1\0\1\4\6\0\1\4\4\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\1\0\2\4\1\0\1\4\2\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\2\4\1\0\1\4"+
    "\2\0\4\4\1\0\7\4\1\0\4\4\1\0\4\4\1\0\1\4"+
    "\1\0\12\4\1\0\21\4\5\0\3\4\1\0\5\4\1\0\21\4"+
    "\u0d34\0\12\5\u0406\0\ua6e0\4\40\0\u103a\4\6\0\336\4\2\0\u1682\4"+
    "\16\0\u1d31\4\17\0\u026e\4\u09a2\0\u021e\4\u05e2\0\u134b\4\5\0\u1060\4"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udc5b\0"+
    "\1\5\36\0\140\5\200\0\360\5\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\6\3\1\5"+
    "\1\6\1\7\1\10\2\0\1\11\6\3\1\4\76\3"+
    "\1\12\1\13\1\14\10\3\1\15\2\3\1\16\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\37\0\135\0\174\0\233\0\272"+
    "\0\331\0\370\0\u0117\0\u0136\0\u0155\0\37\0\37\0\37"+
    "\0\37\0\u0174\0\233\0\37\0\u0193\0\u01b2\0\u01d1\0\u01f0"+
    "\0\u020f\0\u022e\0\u0174\0\u024d\0\u026c\0\u028b\0\u02aa\0\u02c9"+
    "\0\u02e8\0\u0307\0\u0326\0\u0345\0\u0364\0\u0383\0\u03a2\0\u03c1"+
    "\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u045c\0\u047b\0\u049a\0\u04b9"+
    "\0\u04d8\0\u04f7\0\u0516\0\u0535\0\u0554\0\u0573\0\u0592\0\u05b1"+
    "\0\u05d0\0\u05ef\0\u060e\0\u062d\0\u064c\0\u066b\0\u068a\0\u06a9"+
    "\0\u06c8\0\u06e7\0\u0706\0\u0725\0\u0744\0\u0763\0\u0782\0\u07a1"+
    "\0\u07c0\0\u07df\0\u07fe\0\u081d\0\u083c\0\u085b\0\u087a\0\u0899"+
    "\0\u08b8\0\u08d7\0\u08f6\0\u0915\0\u0934\0\u0953\0\u0972\0\u0991"+
    "\0\u09b0\0\135\0\135\0\135\0\u09cf\0\u09ee\0\u0a0d\0\u0a2c"+
    "\0\u0a4b\0\u0a6a\0\u0a89\0\u0aa8\0\135\0\u0ac7\0\u0ae6\0\135"+
    "\0\135";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\2\1\6\1\2\1\7"+
    "\1\10\1\11\1\5\1\12\7\5\1\13\1\5\1\14"+
    "\2\5\1\15\1\5\1\16\1\17\1\20\1\21\41\0"+
    "\1\4\40\0\3\5\2\0\22\5\12\0\1\6\1\22"+
    "\27\0\10\23\1\24\26\23\4\0\3\5\2\0\1\5"+
    "\1\25\20\5\10\0\3\5\2\0\3\5\1\26\16\5"+
    "\10\0\3\5\2\0\10\5\1\27\11\5\10\0\3\5"+
    "\2\0\7\5\1\30\12\5\10\0\3\5\2\0\4\5"+
    "\1\31\15\5\10\0\3\5\2\0\10\5\1\32\11\5"+
    "\12\0\1\33\34\0\3\5\2\0\2\5\1\34\17\5"+
    "\10\0\3\5\2\0\4\5\1\35\15\5\10\0\3\5"+
    "\2\0\21\5\1\36\10\0\3\5\2\0\13\5\1\37"+
    "\6\5\10\0\3\5\2\0\16\5\1\40\3\5\10\0"+
    "\3\5\2\0\14\5\1\41\5\5\10\0\3\5\2\0"+
    "\3\5\1\42\16\5\10\0\3\5\2\0\20\5\1\43"+
    "\1\5\10\0\3\5\2\0\4\5\1\44\15\5\10\0"+
    "\3\5\2\0\2\5\1\45\17\5\10\0\3\5\2\0"+
    "\6\5\1\46\13\5\10\0\3\5\2\0\4\5\1\47"+
    "\15\5\10\0\3\5\2\0\4\5\1\50\15\5\10\0"+
    "\3\5\2\0\4\5\1\51\15\5\10\0\3\5\2\0"+
    "\16\5\1\52\3\5\10\0\3\5\2\0\1\53\21\5"+
    "\10\0\3\5\2\0\7\5\1\54\12\5\10\0\3\5"+
    "\2\0\15\5\1\55\4\5\10\0\3\5\2\0\5\5"+
    "\1\56\14\5\10\0\3\5\2\0\16\5\1\57\3\5"+
    "\10\0\3\5\2\0\6\5\1\60\13\5\10\0\3\5"+
    "\2\0\4\5\1\61\15\5\10\0\3\5\2\0\10\5"+
    "\1\62\11\5\10\0\3\5\2\0\4\5\1\63\15\5"+
    "\10\0\3\5\2\0\2\5\1\64\17\5\10\0\3\5"+
    "\2\0\2\5\1\65\17\5\10\0\3\5\2\0\13\5"+
    "\1\66\6\5\10\0\3\5\2\0\10\5\1\67\11\5"+
    "\10\0\3\5\2\0\3\5\1\70\16\5\10\0\3\5"+
    "\2\0\11\5\1\71\10\5\10\0\3\5\2\0\1\72"+
    "\21\5\10\0\3\5\2\0\1\73\21\5\10\0\3\5"+
    "\2\0\7\5\1\74\12\5\10\0\3\5\2\0\6\5"+
    "\1\75\13\5\10\0\3\5\2\0\4\5\1\76\15\5"+
    "\10\0\3\5\2\0\2\5\1\77\17\5\10\0\3\5"+
    "\2\0\6\5\1\100\13\5\10\0\3\5\2\0\6\5"+
    "\1\101\13\5\10\0\3\5\2\0\13\5\1\102\6\5"+
    "\10\0\3\5\2\0\16\5\1\103\3\5\10\0\3\5"+
    "\2\0\11\5\1\104\10\5\10\0\3\5\2\0\1\105"+
    "\21\5\10\0\3\5\2\0\7\5\1\106\12\5\10\0"+
    "\3\5\2\0\13\5\1\107\6\5\10\0\3\5\2\0"+
    "\2\5\1\110\17\5\10\0\3\5\2\0\13\5\1\111"+
    "\6\5\10\0\3\5\2\0\4\5\1\112\15\5\10\0"+
    "\3\5\2\0\6\5\1\113\13\5\10\0\3\5\2\0"+
    "\10\5\1\114\11\5\10\0\3\5\2\0\7\5\1\115"+
    "\12\5\10\0\3\5\2\0\1\116\21\5\10\0\3\5"+
    "\2\0\1\5\1\117\20\5\10\0\3\5\2\0\12\5"+
    "\1\120\7\5\10\0\3\5\2\0\13\5\1\121\6\5"+
    "\10\0\3\5\2\0\3\5\1\122\16\5\10\0\3\5"+
    "\2\0\13\5\1\123\6\5\10\0\3\5\2\0\4\5"+
    "\1\124\15\5\10\0\3\5\2\0\17\5\1\125\2\5"+
    "\10\0\3\5\2\0\13\5\1\126\6\5\10\0\3\5"+
    "\2\0\7\5\1\127\12\5\10\0\3\5\2\0\4\5"+
    "\1\130\15\5\10\0\3\5\2\0\2\5\1\131\17\5"+
    "\10\0\3\5\2\0\10\5\1\132\11\5\10\0\3\5"+
    "\2\0\10\5\1\133\11\5\10\0\3\5\2\0\14\5"+
    "\1\134\5\5\10\0\3\5\2\0\13\5\1\135\6\5"+
    "\10\0\3\5\2\0\11\5\1\136\10\5\10\0\3\5"+
    "\2\0\1\137\21\5\10\0\3\5\2\0\2\5\1\140"+
    "\17\5\10\0\3\5\2\0\4\5\1\141\15\5\10\0"+
    "\3\5\2\0\4\5\1\142\15\5\10\0\3\5\2\0"+
    "\1\143\21\5\10\0\3\5\2\0\12\5\1\144\7\5"+
    "\10\0\3\5\2\0\10\5\1\145\11\5\10\0\3\5"+
    "\2\0\4\5\1\146\15\5\10\0\3\5\2\0\13\5"+
    "\1\147\6\5\10\0\3\5\2\0\10\5\1\150\11\5"+
    "\10\0\3\5\2\0\14\5\1\151\5\5\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2821];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\11\1\4\11\2\0\1\11"+
    "\125\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerUsuario(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3878) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Caracter ilegal <"+yytext()+">");
            } 
            // fall through
          case 16: break;
          case 2: 
            { /* Ignorar */
            } 
            // fall through
          case 17: break;
          case 3: 
            { return symbol(sym.IDENTIFIER, yytext());
            } 
            // fall through
          case 18: break;
          case 4: 
            { return symbol(sym.NUMBER, Double.parseDouble(yytext()));
            } 
            // fall through
          case 19: break;
          case 5: 
            { return symbol(sym.LLAVE_ABRE);
            } 
            // fall through
          case 20: break;
          case 6: 
            { return symbol(sym.LLAVE_CIERRA);
            } 
            // fall through
          case 21: break;
          case 7: 
            { return symbol(sym.DOS_PUNTOS);
            } 
            // fall through
          case 22: break;
          case 8: 
            { return symbol(sym.COMA);
            } 
            // fall through
          case 23: break;
          case 9: 
            { return symbol(sym.STRING, yytext().substring(1, yytext().length() - 1));
            } 
            // fall through
          case 24: break;
          case 10: 
            { return symbol(sym.LOGIN_USUARIO);
            } 
            // fall through
          case 25: break;
          case 11: 
            { return symbol(sym.USUARIO_NUEVO);
            } 
            // fall through
          case 26: break;
          case 12: 
            { return symbol(sym.FIN_SOLICITUD);
            } 
            // fall through
          case 27: break;
          case 13: 
            { return symbol(sym.ELIMINAR_USUARIO);
            } 
            // fall through
          case 28: break;
          case 14: 
            { return symbol(sym.MODIFICAR_USUARIO);
            } 
            // fall through
          case 29: break;
          case 15: 
            { return symbol(sym.REALIZAR_SOLICITUD);
            } 
            // fall through
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerUsuario [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerUsuario scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerUsuario(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
